{
	"info": {
		"_postman_id": "cceb78a1-c35b-44a0-9261-17b110a37346",
		"name": "HAMRESUN TEST",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "29122486",
		"_collection_link": "https://bold-equinox-465293.postman.co/workspace/Arze~668f8481-3bf0-4721-9e1d-8d55f12ff8d6/collection/29122486-cceb78a1-c35b-44a0-9261-17b110a37346?action=share&source=collection_link&creator=29122486"
	},
	"item": [
		{
			"name": "project",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Function to generate a random integer between min (inclusive) and max (inclusive)\r",
							"function getRandomInt(min, max) {\r",
							"    return Math.floor(Math.random() * (max - min + 1)) + min;\r",
							"}\r",
							"\r",
							"// Array of titles\r",
							"const titles = [\r",
							"    'برج باغ.', 'روف گاردن.', 'ارکیده', 'آرتیمیس.', 'اپال.', 'سانا.'\r",
							"];\r",
							"\r",
							"// Generate random title\r",
							"const randomTitle = titles[getRandomInt(0, titles.length - 1)];\r",
							"\r",
							"// Set the random title as an environment variable\r",
							"pm.environment.set('randomTitle', randomTitle);\r",
							"\r",
							"// Log the random title\r",
							"console.log('RandomTitle:', randomTitle);\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"// Function to generate a random integer between min (inclusive) and max (inclusive)\r",
							"function getRandomInt(min, max) {\r",
							"    return Math.floor(Math.random() * (max - min + 1)) + min;\r",
							"}\r",
							"\r",
							"// Array of province names\r",
							"const provinces = [\r",
							"    8, 12, 13, 15, 1, 3, \r",
							"    \r",
							"];\r",
							"\r",
							"// Generate random province name\r",
							"const randomProvince = provinces[getRandomInt(0, provinces.length - 1)];\r",
							"\r",
							"// Set the random province name as an environment variable\r",
							"pm.environment.set('randomProvince', randomProvince);\r",
							"\r",
							"// Log the random province name\r",
							"console.log('randomProvince:', randomProvince);\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"// Step 1: Define a list of cities\r",
							"const cities = [ 110, 58, 170, 60, 40, 70, ];\r",
							"\r",
							"// Step 2: Choose a random city\r",
							"const randomCity = cities[Math.floor(Math.random() * cities.length)];\r",
							"\r",
							"// Step 3: Set the random city in an environment variable\r",
							"pm.environment.set(\"randomCity\", randomCity);\r",
							"\r",
							"// Log the random city to the console (optional)\r",
							"console.log(\"randomCity: \" + randomCity);\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"// Helper function to generate a random integer between min and max\r",
							"function getRandomInt(min, max) {\r",
							"    return Math.floor(Math.random() * (max - min + 1)) + min;\r",
							"}\r",
							"\r",
							"// Generate a random landline phone number (US format)\r",
							"function generateRandomLandlinePhoneNumber() {\r",
							"    // US landline phone number format (XXX) XXX-XXXX\r",
							"    // Area codes typically don't start with 0 or 1 and should be between 200 and 999\r",
							"    const areaCode = getRandomInt(200, 999);\r",
							"    // Central office codes typically don't start with 0 or 1\r",
							"    const centralOfficeCode = getRandomInt(200, 999);\r",
							"    const lineNumber = getRandomInt(1000, 9999);\r",
							"    \r",
							"    return `(${areaCode}) ${centralOfficeCode}-${lineNumber}`;\r",
							"}\r",
							"\r",
							"// Generate random landline phone number\r",
							"const randomLandlinePhoneNumber = generateRandomLandlinePhoneNumber();\r",
							"\r",
							"// Set environment variable\r",
							"pm.environment.set(\"randomLandlinePhoneNumber\", randomLandlinePhoneNumber);\r",
							"\r",
							"// Logging the random landline phone number for debugging purposes\r",
							"console.log(`Random Landline Phone Number: ${randomLandlinePhoneNumber}`);\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"// Jalaali conversion functions from jalaali-js library\r",
							"// Reference: https://github.com/jalaali/jalaali-js\r",
							"\r",
							"function toJalaali(gy, gm, gd) {\r",
							"  const g_d_m = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31],\r",
							"        j_d_m = [31, 31, 31, 31, 31, 31, 30, 30, 30, 30, 30, 29];\r",
							"\r",
							"  let gy2 = (gm > 2) ? (gy + 1) : gy;\r",
							"  let days = 355666 + (365 * gy) + ((gy2 + 3) / 4 | 0) - ((gy2 + 99) / 100 | 0) + ((gy2 + 399) / 400 | 0) + gd;\r",
							"  for (let i = 0; i < gm - 1; ++i) {\r",
							"    days += g_d_m[i];\r",
							"  }\r",
							"  let jy = -1595 + (33 * (days / 12053 | 0));\r",
							"  days %= 12053;\r",
							"  jy += 4 * (days / 1461 | 0);\r",
							"  days %= 1461;\r",
							"  if (days > 365) {\r",
							"    jy += (days - 1) / 365 | 0;\r",
							"    days = (days - 1) % 365;\r",
							"  }\r",
							"  let i;\r",
							"  for (i = 0; i < 11 && days >= j_d_m[i]; ++i) {\r",
							"    days -= j_d_m[i];\r",
							"  }\r",
							"  let jm = i + 1;\r",
							"  let jd = days + 1;\r",
							"  return { jy, jm, jd };\r",
							"}\r",
							"\r",
							"function randomDate(start, end) {\r",
							"  return new Date(start.getTime() + Math.random() * (end.getTime() - start.getTime()));\r",
							"}\r",
							"\r",
							"// Generate a random date between the given range\r",
							"const start = new Date(2000, 0, 1); // January 1, 2000\r",
							"const end = new Date(2023, 11, 31); // December 31, 2023\r",
							"const randomGregorianDate = randomDate(start, end);\r",
							"\r",
							"// Convert the random Gregorian date to Jalali date\r",
							"const jalaliDate = toJalaali(randomGregorianDate.getFullYear(), randomGregorianDate.getMonth() + 1, randomGregorianDate.getDate());\r",
							"\r",
							"// Format the Jalali date as a string\r",
							"const jalaliDateString = `${jalaliDate.jy}-${jalaliDate.jm}-${jalaliDate.jd}`;\r",
							"\r",
							"console.log('Random Jalali Date:', jalaliDateString);\r",
							"\r",
							"// Set the Jalali date as a Postman variable\r",
							"pm.environment.set(\"randomJalaliDate\", jalaliDateString);\r",
							"\r",
							"// Function to get today's date in Gregorian calendar\r",
							"function getTodayDate() {\r",
							"    const today = new Date();\r",
							"    const year = today.getFullYear();\r",
							"    const month = today.getMonth() + 1; // Months are zero-based\r",
							"    const day = today.getDate();\r",
							"\r",
							"    return { year, month, day };\r",
							"}\r",
							"\r",
							"// Function to convert Gregorian date to Solar Hijri date\r",
							"function gregorianToSolarHijri(gYear, gMonth, gDay) {\r",
							"    const g_days_in_month = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\r",
							"    const sh_days_in_month = [31, 31, 31, 31, 31, 31, 30, 30, 30, 30, 30, 29];\r",
							"\r",
							"    let gy = gYear - 1600;\r",
							"    let gm = gMonth - 1;\r",
							"    let gd = gDay - 1;\r",
							"\r",
							"    let g_day_no = 365 * gy + Math.floor((gy + 3) / 4) - Math.floor((gy + 99) / 100) + Math.floor((gy + 399) / 400);\r",
							"\r",
							"    for (let i = 0; i < gm; ++i) {\r",
							"        g_day_no += g_days_in_month[i];\r",
							"    }\r",
							"\r",
							"    if (gm > 1 && ((gy % 4 === 0 && gy % 100 !== 0) || (gy % 400 === 0))) {\r",
							"        g_day_no++; // leap and after Feb\r",
							"    }\r",
							"\r",
							"    g_day_no += gd;\r",
							"\r",
							"    let sjd = g_day_no - 79;\r",
							"    const scn = sjd % 12053;\r",
							"    const sy = 979 + 33 * Math.floor(sjd / 12053) + 4 * Math.floor(scn / 1461);\r",
							"    sjd = scn % 1461;\r",
							"\r",
							"    if (sjd >= 366) {\r",
							"        sy += Math.floor((sjd - 1) / 365);\r",
							"        sjd = (sjd - 1) % 365;\r",
							"    }\r",
							"\r",
							"    for (var sm = 0; sm < 11 && sjd >= [31, 31, 31, 31, 31, 31, 30, 30, 30, 30, 30, 29][sm]; ++sm)\r",
							"        sjd -= [31, 31, 31, 31, 31, 31, 30, 30, 30, 30, 30, 29][sm];\r",
							"\r",
							"    const sd = sjd + 1;\r",
							"\r",
							"    return { sy, sm: sm + 1, sd };\r",
							"}\r",
							"\r",
							"// Get today's date\r",
							"const today = getTodayDate();\r",
							"\r",
							"// Convert to Solar Hijri date\r",
							"const solarHijriDate = gregorianToSolarHijri(today.year, today.month, today.day);\r",
							"const solarHijriDateString = `${solarHijriDate.sy}-${String(solarHijriDate.sm).padStart(2, '0')}-${String(solarHijriDate.sd).padStart(2, '0')}`;\r",
							"\r",
							"// Set the Solar Hijri date as an environment variable\r",
							"pm.environment.set(\"solarHijriDate\", solarHijriDateString);\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"// Helper function to generate a random integer between min and max\r",
							"function getRandomInt(min, max) {\r",
							"    return Math.floor(Math.random() * (max - min + 1)) + min;\r",
							"}\r",
							"\r",
							"// Generate a random floor number\r",
							"function generateRandomFloorNumber() {\r",
							"    // Assuming a building with floors from -1 (basement) to 50\r",
							"    return getRandomInt(-1, 50);\r",
							"}\r",
							"\r",
							"// Generate random floor number\r",
							"const randomFloorNumber = generateRandomFloorNumber();\r",
							"\r",
							"// Set environment variable\r",
							"pm.environment.set(\"randomFloorNumber\", randomFloorNumber);\r",
							"\r",
							"// Logging the random floor number for debugging purposes\r",
							"console.log(`Random Floor Number: ${randomFloorNumber}`);\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"// Helper function to generate a random integer between min and max\r",
							"function getRandomInt(min, max) {\r",
							"    return Math.floor(Math.random() * (max - min + 1)) + min;\r",
							"}\r",
							"\r",
							"// Generate a random number above 1000\r",
							"function generateRandomNumberAbove1000() {\r",
							"    return getRandomInt(1001, 10000); // Adjust the upper limit as needed\r",
							"}\r",
							"\r",
							"// Generate the random number\r",
							"const randomNumber = generateRandomNumberAbove1000();\r",
							"\r",
							"// Set environment variable\r",
							"pm.environment.set(\"areaNumber\", randomNumber);\r",
							"\r",
							"// Logging the random number for debugging purposes\r",
							"console.log(`Area Number: ${randomNumber}`);\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"// Helper function to generate a random integer between min and max\r",
							"function getRandomInt(min, max) {\r",
							"    return Math.floor(Math.random() * (max - min + 1)) + min;\r",
							"}\r",
							"\r",
							"// Function to generate a random number above 1000 for the infrastructure area\r",
							"function generateRandomInfrastructureArea() {\r",
							"    return getRandomInt(1001, 10000); // Adjust the upper limit as needed\r",
							"}\r",
							"\r",
							"// Check if the infrastructure area is already set, if not generate it\r",
							"let infrastructureArea = pm.environment.get(\"infrastructureArea\");\r",
							"if (!infrastructureArea) {\r",
							"    infrastructureArea = generateRandomInfrastructureArea();\r",
							"    pm.environment.set(\"infrastructureArea\", infrastructureArea);\r",
							"    console.log(`Generated Infrastructure Area: ${infrastructureArea}`);\r",
							"} else {\r",
							"    console.log(`Retrieved Existing Infrastructure Area: ${infrastructureArea}`);\r",
							"}\r",
							"\r",
							"// Function to generate a random number greater than a given minimum value\r",
							"function getRandomIntAbove(min) {\r",
							"    // Ensure the generated number is larger than the given min\r",
							"    const minAbove = min + 1;\r",
							"    const maxAbove = min + 10000; // Adjust the range as needed\r",
							"    return getRandomInt(minAbove, maxAbove);\r",
							"}\r",
							"\r",
							"// Generate the land area which is larger than the infrastructure area\r",
							"const landArea = getRandomIntAbove(infrastructureArea);\r",
							"\r",
							"// Set environment variable for land area\r",
							"pm.environment.set(\"landArea\", landArea);\r",
							"\r",
							"// Logging the land area for debugging purposes\r",
							"console.log(`Land Area: ${landArea}`);\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"// Helper function to generate a random integer between min and max (inclusive)\r",
							"function getRandomInt(min, max) {\r",
							"    return Math.floor(Math.random() * (max - min + 1)) + min;\r",
							"}\r",
							"\r",
							"// Function to generate a valid Iranian national code\r",
							"function generateIranianNationalCode() {\r",
							"    let code = '';\r",
							"    let sum = 0;\r",
							"    \r",
							"    // Generate the first 9 digits randomly\r",
							"    for (let i = 0; i < 9; i++) {\r",
							"        const digit = getRandomInt(0, 9);\r",
							"        code += digit;\r",
							"        sum += digit * (10 - i);\r",
							"    }\r",
							"\r",
							"    // Calculate the control digit\r",
							"    const remainder = sum % 11;\r",
							"    let controlDigit;\r",
							"    if (remainder < 2) {\r",
							"        controlDigit = remainder;\r",
							"    } else {\r",
							"        controlDigit = 11 - remainder;\r",
							"    }\r",
							"\r",
							"    // Append the control digit to the code\r",
							"    code += controlDigit;\r",
							"    \r",
							"    return code;\r",
							"}\r",
							"\r",
							"// Generate the Iranian national code\r",
							"const nationalCode = generateIranianNationalCode();\r",
							"\r",
							"// Set environment variable\r",
							"pm.environment.set(\"iranianNationalCode\", nationalCode);\r",
							"\r",
							"// Logging the national code for debugging purposes\r",
							"console.log(`Iranian National Code: ${nationalCode}`);\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"// Step 1: Define a list of cities\r",
							"const project = [ 1, 2 ];\r",
							"\r",
							"// Step 2: Choose a random project status\r",
							"const randomprojectstatus = project[Math.floor(Math.random() * project.length)];\r",
							"\r",
							"// Step 3: Set the random project in an environment variable\r",
							"pm.environment.set(\"randomprojectstatus\", randomprojectstatus);\r",
							"\r",
							"// Log the random project to the console (optional)\r",
							"console.log(\"randomprojectstatus: \" + randomprojectstatus);\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"// Step 1: Define a list of cities\r",
							"const creationstatus = [ 5, 6 ];\r",
							"\r",
							"// Step 2: Choose a random creation status\r",
							"const randoomcreationstatus = creationstatus[Math.floor(Math.random() * creationstatus.length)];\r",
							"\r",
							"// Step 3: Set the creation status in an environment variable\r",
							"pm.environment.set(\"randoomcreationstatus\", randoomcreationstatus);\r",
							"\r",
							"// Log the random project to the console (optional)\r",
							"console.log(\"randoomcreationstatus: \" + randoomcreationstatus);\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"// Generate a 6-digit random number\r",
							"const randomSixDigitNumber = Math.floor(100000 + Math.random() * 900000);\r",
							"\r",
							"// Store the number in an environment variable\r",
							"pm.environment.set(\"randomSixDigitNumber\", randomSixDigitNumber);\r",
							"\r",
							"// Log the number to the console (optional)\r",
							"console.log(randomSixDigitNumber);\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"// List of sample streets in Iran\r",
							"const streets = [\"Vali Asr St.\", \"Imam Khomeini St.\", \"Ferdowsi St.\", \"Enghelab St.\", \"Saadi St.\", \"Hafez St.\"];\r",
							"\r",
							"\r",
							"// Function to generate a random integer between min and max (inclusive)\r",
							"function getRandomInt(min, max) {\r",
							"    return Math.floor(Math.random() * (max - min + 1)) + min;\r",
							"}\r",
							"\r",
							"// Generate a single random address\r",
							"const street = streets[getRandomInt(0, streets.length - 1)];\r",
							"\r",
							"// Store the address in an environment variable\r",
							"pm.environment.set(\"randomAddress\", street);\r",
							"\r",
							"// Log the address to the console (optional)\r",
							"console.log(street);\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "accept",
						"value": "image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8"
					},
					{
						"key": "accept-language",
						"value": "en-US,en;q=0.9"
					},
					{
						"key": "cookie",
						"value": "access=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0b2tlbl90eXBlIjoiYWNjZXNzIiwiZXhwIjoxNzIyMTI4OTAyLCJpYXQiOjE3MjE1NTI5MDIsImp0aSI6IjQzMjc1MjNkMThmNjRlZjFiZmJjYWQ1ZmFkMGUxZWM0IiwidXNlcl9pZCI6MzN9.qzNh0EW1uwGPqyd38eIq_lbvD6VChX7rtOf3z_t-eXs; refresh=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0b2tlbl90eXBlIjoicmVmcmVzaCIsImV4cCI6MTcyMTYzOTMwMiwiaWF0IjoxNzIxNTUyOTAyLCJqdGkiOiI3NDZhNDgxNjhiMDk0YTkyOWE2NGI0N2I3ZmQ0NTg2NyIsInVzZXJfaWQiOjMzfQ.RdjaNgHdIGxZ3sgH9BRfpWsL0-5m2w53F4-77JyyG4I; role=employer; csrftoken=ziZkhUBTNEAJCver8jdNPgNVhM3WsxLP"
					},
					{
						"key": "if-modified-since",
						"value": "Thu, 09 May 2024 15:46:18 GMT"
					},
					{
						"key": "if-none-match",
						"value": "W/\"10be-18f5e08b024\""
					},
					{
						"key": "priority",
						"value": "u=1, i"
					},
					{
						"key": "referer",
						"value": "https://hamresun.develop.raydadportal.ir/projects/add"
					},
					{
						"key": "sec-ch-ua",
						"value": "\"Not/A)Brand\";v=\"8\", \"Chromium\";v=\"126\", \"Google Chrome\";v=\"126\""
					},
					{
						"key": "sec-ch-ua-mobile",
						"value": "?0"
					},
					{
						"key": "sec-ch-ua-platform",
						"value": "\"Windows\""
					},
					{
						"key": "sec-fetch-dest",
						"value": "image"
					},
					{
						"key": "sec-fetch-mode",
						"value": "no-cors"
					},
					{
						"key": "sec-fetch-site",
						"value": "same-origin"
					},
					{
						"key": "user-agent",
						"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/126.0.0.0 Safari/537.36"
					},
					{
						"key": "authorization",
						"value": "Bearer {{Token}}"
					},
					{
						"key": "Pragma",
						"value": "no-cache"
					},
					{
						"key": "Origin",
						"value": "https://hamresun.develop.raydadportal.ir"
					},
					{
						"key": "Accept-Language",
						"value": "en-US,en;q=0.9"
					},
					{
						"key": "Sec-WebSocket-Key",
						"value": "MX+L8Z8UuuTuZTe1TNjCeg=="
					},
					{
						"key": "User-Agent",
						"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/126.0.0.0 Safari/537.36"
					},
					{
						"key": "Upgrade",
						"value": "websocket"
					},
					{
						"key": "Cache-Control",
						"value": "no-cache"
					},
					{
						"key": "Connection",
						"value": "Upgrade"
					},
					{
						"key": "Sec-WebSocket-Version",
						"value": "13"
					},
					{
						"key": "Sec-WebSocket-Extensions",
						"value": "permessage-deflate; client_max_window_bits"
					},
					{
						"key": "Referer",
						"value": ""
					},
					{
						"key": "origin",
						"value": "https://hamresun.develop.raydadportal.ir"
					},
					{
						"key": "purpose",
						"value": "prefetch"
					},
					{
						"key": "x-middleware-prefetch",
						"value": "1"
					},
					{
						"key": "x-nextjs-data",
						"value": "1"
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "title",
							"value": "{{randomTitle}}",
							"type": "text"
						},
						{
							"key": "province",
							"value": "{{randomProvince}}",
							"type": "text"
						},
						{
							"key": "city",
							"value": "{{randomCity}}",
							"type": "text"
						},
						{
							"key": "landline_phone",
							"value": "{{randomLandlinePhoneNumber}}",
							"type": "text"
						},
						{
							"key": "license_issuance_date",
							"value": "{{randomJalaliDate}}",
							"type": "text"
						},
						{
							"key": "floor_number",
							"value": "{{randomFloorNumber}}",
							"type": "text"
						},
						{
							"key": "house_area",
							"value": "{{areaNumber}}",
							"type": "text"
						},
						{
							"key": "total_area",
							"value": "{{landArea}}",
							"type": "text"
						},
						{
							"key": "owner_national_code",
							"value": "{{iranianNationalCode}}",
							"type": "text"
						},
						{
							"key": "project_status",
							"value": "{{randomprojectstatus}}",
							"type": "text"
						},
						{
							"key": "creation_status",
							"value": "{{randoomcreationstatus}}",
							"type": "text"
						},
						{
							"key": "production_license",
							"value": "{{randomSixDigitNumber}}",
							"type": "text"
						},
						{
							"key": "address",
							"value": "{{randomAddress}}",
							"type": "text"
						},
						{
							"key": "file_0",
							"type": "file",
							"src": "56255.jpg"
						}
					]
				},
				"url": {
					"raw": "{{Hamresun}}/api/job/project/create/",
					"host": [
						"{{Hamresun}}"
					],
					"path": [
						"api",
						"job",
						"project",
						"create",
						""
					]
				}
			},
			"response": []
		}
	],
	"variable": [
		{
			"value": "",
			"type": "string",
			"disabled": true
		}
	]
}